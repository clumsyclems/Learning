<?php

namespace ApiBackendBundle\Repository;

use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use ApiBackendBundle\Entity\Transaction;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * BlacklistReceiverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlacklistReceiverRepository extends \Doctrine\ORM\EntityRepository
{

    public function findPage($page, $per_page, $predicate=null, $sort = null, $filter = null, $export = false)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select(array('blr'))
            ->from('ApiBackendBundle:BlacklistReceiver', 'blr');

        $total=0;
        $totalentries=0;

        if ($filter && is_object($filter)) {
            foreach ($filter as $k => $v) {
                if ($v!="") {
                    if (in_array($k, array('code'))) {
                        $qb->andWhere('blr.phoneCode LIKE :' . $k)
                            ->setParameter($k, ''. $v . '%');
                    } elseif (in_array($k, array('number'))) {
                        $qb->andWhere('blr.phoneNumber LIKE :' . $k)
                            ->setParameter($k, ''. $v . '%');
                    } else {
                        $qb->andWhere('blr.' . $k . ' LIKE :' . $k)
                            ->setParameter($k, '%' . $v . '%');
                    }
                }
            }
        }

        $qb->addOrderBy('blr.phoneCode', 'asc');
        $qb->addOrderBy('blr.phoneNumber', 'asc');

        if ($page && $per_page) {
            $paginator = new Paginator($qb->getQuery());
            $qb->setMaxResults($per_page);
            $totalentries=count($paginator);
            $total = ceil($totalentries / $per_page);
            $page = (($page - 1) > $total) ? $total : $page;
            $qb->setFirstResult(($page - 1) * $per_page);
        } else {
            // limit to 3000
            //$qb->setMaxResults(3000);
            $total = 0;
            $totalentries = 0;
        }

        $datas = $qb->getQuery()->getResult();
        $ret = array(
            'pagination' => array(
                'page' => $page,
                'total' => $total,
                'entries' => is_countable($datas) ? count($datas) : 0,
                'totalentries' => $totalentries
            ),
            'data' => $datas
        );

        return $ret;
    }


}// end class
